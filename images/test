// Read (serialize to JSON)
const editor = Ext.ComponentQuery.query('#contentEditor')[0];
const html = editor.cleanHtml(editor.getValue()); // light cleanup
const json = JSON.stringify({ contentHtml: html }); // store/send this

// Later: load back in
const data = JSON.parse(jsonFromServer);
editor.setValue(data.contentHtml || '');

----------------------------------------

APModFiller.injectRecordView = () => {
    if (typeof EAM.view?.common?.RecordView === 'undefined') return;
    const RVclass = EAM.view.common.RecordView;

    if (RVclass.prototype.amodFillerOrigInitPageLayout == null) {
        RVclass.prototype.amodFillerOrigInitPageLayout = RVclass.prototype.initPageLayout;
        RVclass.prototype.initPageLayout = function(c, e, b) {
            this.amodFillerOrigInitPageLayout.apply(this, [c, e, b]);
            const a = this;
            if (this.tabURL == "WSJOBS.HDR") {
                const problemcode = a.getForm().findField('problemcode');
                const failurecode = a.getForm().findField('failurecode');
                const causecode = a.getForm().findField('causecode');
                if(problemcode != null && failurecode != null && causecode != null) {
                    const parent = causecode.ownerCt;
                    if(parent?.items?.keys != null) {
                        const pos = parent.items.keys.indexOf(causecode.id) + 1;
                        parent.insert(pos,{
                            xtype: 'button',
                            name: 'apModCloseCodes',
                            text: 'Fill Close Codes',
                            margin: '0 0 0 150',
                            listeners: {
                                click: function(cmp,e) {
                                    const fields = [ problemcode, failurecode, causecode ];
                                    APModFiller.buttonClick(cmp,e,fields);
                                },
                            },
                        });
                    }
                }
                const URL = "https://eu1.eam.hxgnsmartcloud.com/web/base/logindisp?tenant=AMAZONRMEEU_PRD&FROMEMAIL=YES&SYSTEM_FUNCTION_NAME=WSJOBS&USER_FUNCTION_NAME=WSJOBS&workordernum=";
                const description = a.getForm().findField('description');
                const workorder = a.getForm().findField('workordernum');
                if(description != null && workorder != null) {
                    const parent = description.ownerCt;
                    if(parent?.items?.keys != null) {
                        const pos = parent.items.keys.indexOf(description.id) + 1;
                        parent.insert(pos,{
                            xtype: 'button',
                            name: 'apModCopyWO',
                            text: 'Â©',
                            margin: '0 0 0 20',
                            tooltip: 'Copy APM WO link',
                            listeners: {
                                click: function(cmp,e) {
                                    const woNumber = workorder.value ?? "";
                                    navigator.clipboard.writeText(URL+woNumber);
                                    if(APModPopup)
                                        APModPopup.openPopup("WO direct link saved to Clipboard.");
                                },
                            },
                        });
                    }
                }
                // Inline version: no IIFE; drop directly inside your WSJOBS.HDR block
                const combo = a.getForm().findField('NAME_DER_COMBO'); // TODO: replace with real field name
                if (combo && combo.ownerCt) {
                    const parent = combo.ownerCt;
                    const store = combo.getStore && combo.getStore();
                    const valueField = combo.valueField || 'value';

                    // Avoid wiring twice if initPageLayout can run multiple times
                    if (!combo.apmDurationWired && store) {
                        combo.apmDurationWired = true;

                        // Insert label only if not already present right after the combo
                        const insertIndex = parent.items.indexOf ? parent.items.indexOf(combo) + 1 :
                            (parent.items.keys ? parent.items.keys.indexOf(combo.id) + 1 : null);

                        let label = parent.down('#apModPriorityOverdueLabel');
                        if (!label && insertIndex != null) {
                            label = parent.insert(insertIndex, {
                                xtype: 'displayfield',
                                itemId: 'apModPriorityOverdueLabel',
                                value: '',
                                margin: '0 0 0 12'
                            });
                        }

                        // Helpers stay local to this block
                        function durationText(val) {
                          const n = toInt(val);
                          switch (n) {
                            case 1: return '1 day overdue';
                            case 2: return '7 days overdue';
                            case 3: return "don't use !!!";
                            case 4:
                            case 5: return '30 days overdue';
                            default: return '';
                          }
                        }

                        function toInt(val) {
                              if (val == null) return null;
                              if (typeof val === 'number' && Number.isFinite(val)) return val;
                              if (typeof val === 'string') {
                                const n = parseInt(val.trim(), 10);
                                return Number.isFinite(n) ? n : null;
                              }
                              return null;
                        }

                        function updateLabel() {
                          if (!label) return;
                          const v = combo.getValue();
                          label.setValue(durationText(v));
                        
                          const danger = toInt(v) === 3;
                          // Works on displayfield as well:
                          label.setFieldStyle('color:' + (danger ? '#c00' : ''));
                        }

                        function applyRule() {
                            Ext.suspendLayouts();

                            // Step 1: remap 3 -> 4 if currently selected
                            const cur = combo.getValue();
                            if (cur === 3 || cur === '3') {
                                const has4 =
                                    store.findExact(valueField, 4) !== -1 ||
                                    store.findExact(valueField, '4') !== -1;
                                if (has4) {
                                    combo.setValue(4);
                                } else {
                                    const first = store.first && store.first();
                                    if (first) combo.setValue(first.get(valueField));
                                    else combo.reset();
                                }
                            }

                            // Step 2: remove value 3 from the store
                            let idx;
                            while ((idx = store.findExact(valueField, 3)) !== -1) store.removeAt(idx);
                            while ((idx = store.findExact(valueField, '3')) !== -1) store.removeAt(idx);

                            Ext.resumeLayouts(true);

                            updateLabel();
                        }

                        // Initial application (after render if needed)
                        if (combo.rendered) {
                            applyRule();
                        } else {
                            combo.on('afterrender', applyRule, { single: true });
                        }

                        // Keep label in sync
                        combo.on('change', updateLabel);
                        combo.on('select', updateLabel);

                        // Handle late/remote loads as well
                        if (store.on) {
                            store.on('load', applyRule);
                        }
                    }
                }
            }
        }
    }
}
